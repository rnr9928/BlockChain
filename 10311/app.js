// 비트코인 백서

//  이중 지불을 막기위해 거래 내용 해싱 타임스탬프를 찍어서 해시 기반 작업 
// 증명을 연결한 사슬로 만들고 작업 증명을 재 수행하지 않으면 변경 할 수 
//  없는 기록을 만든다.
//  블록들을 체인 ㄴ형태로 연결한 형태를 탐이스탬프를 찍어서 기록한 것
// 블록 체인이라는 데이터들을 안전하게 위변조가 되지 않게 해시 기반 작업
// 증명을 통해서 블록체인이 안전하게 보관이 되고 생성이 되었다는것을
//  증명 할 수 있는 기반이 된 것

// 블록 체인의 4대 요소기슬
// 1. 블록과 트랜잭션 : 트랜잭션어ㅡㄴ 사용자의 송금내역이고 송금내역들을
// 하나의 블록에 포함시켜야지만 안정성을 보장 할 수 있는 기반을 만들 수 있다
//  그 블록들이 해시 알고리즘과 POW를 통해 연결한 형태가 블록체인
// 2. 분산 네트워크: 사용자들이 언제든지 네트워크에 참여 할 수 있고 나갈 수 있는것
// 3. 암호화: 본인 증명뿐만 아니라 거래가 위변조 되지 않았다고 증명 할 수 있따.
// 4. 합의 알고리즘: 분산 네트워크에서 중앙화된 기관이 없으니까 하나의 체인을 구성하는

// POW (proof of work) :  스펨메일 방지하고자 고안된 암호화폐
// 이메일을 보내기위해 작업증명 알고리즘을 이용해서 해시값 찾음

//  블록의 구성
//  블록은 영역 Header, Body로 나눠짐

// Header
// 1.버전 정보
// 2. 이전 블록의 해시
// 3. 몇번쨰 블록인지의 정보
// 4. 블록의 생성 시간의 정보(타임 스태프)
// 5. 블록의 해시
// 6. Body의 내용을 해싱한 값.(머클루트)
// 7. 채굴의 난이도
// 8. 논스

// Body
// 1.블록에 저장할 데이터
// 블록에 대한 이해를 좀 쉽게 하기위해서 Hearder, Body라고 구분

const Block  = {
    version : '1.0.0', //블록의 버전
    previousHash : '', //이전 블록의 해시
    height : 0, // 블록체인에 연결된 블록의 수
    timestamp: 654321978,  // 블록 생성 시간
    hash: '', //해시 특정 블록을 식별할 때 고유 식별자로 해시값 사용 
                // 해시값은 블록의 생성일 , 버전 , 비츠 , 머클루트 , 이전 블록의 해시
                // 논스라 불리는 임시값 등등 조합해서 해시로 변환해서 생성
    merkleRoot: '', //bolck body의 내용을 해싱한 값 2진 트리 형태
                    // 머클루트는 블록의 트랜잭션에 대한 내용이 저장되 있고
                    // 트.잭 내용들을 해싱해서 해시값으로 만든 트리구조가 머클 트리라 함
   bits : '', // 비츠난이도 조절용 수치
   difficulty : '', // 채굴의 난이도
   nonce: '', // 논스는 최초에 0에서부터 시작해서 조건이 만족하는 해쉬값을 찾을 때 까지 1씩
            //   증가하는 계산 횟수
    data : ['asdqwezxc'] // block body 내용 트.잭내용이 블록안에 데이터로 저장
}

//  블록체인의 거래정보 변경이 불가능한 이유
//  거래 정보의 해시값은 거래가 포함된 블록의 머클루트 계산에 입력값으로 사용되고
//  머클루트는 블록 해시의 계산 입력값으로 사용
//  A블록이랑 B블록이 있다고하고
//  A블록의 해시는 다음 B블록의 previousHash(이전 블록의 해시) 값에 저장
//  previousHash는 A블록의 헤더 정보이고 블록 해시를 계산하기위한 값으로 사용된다.,
//  거래 정보 변경 -> 머클루트 변경 -> 머클루트 변경으로 블록해시 변경 -> 블록해시는 논스값을 찾아 
//  작업 증명이 되야 구할 수 있기 때문에 거래정보를 변경한 블록부터 그 이후의 모든 블록을
// 순서대로 다시 채굴해야한다.

//  완료된 거래 정보를 변경하려면 변경하려는 거래 정보가 있는 블록부터 그 이후의 모든 블록을
//  순서대로 다시 채굴해야 하기 때문에 시간이 뭋척 많이 걸리고 그 동안 다른 노드들에 의해서
//  블록이 계속 추가되어 완료된 거래 정보의 변경은 현실적으로 불가능하다.

// 작업 증명 POW
// 새로운 블록을 블록체인에 추가하는 작업을 완료한 것을 증명하는 것
// 새 블록을 블록체인에 추가하려면 블록의 블록 해시를 계산해야하고
//  블록 해시의 계산은 블록 해더 정보의 논스 값을 계산해서 구한다ㅏ, 
//  논스 값을 구하는게 작업증명

//  블록의 해시값과 머클루트 값을 Crypto-js와 merkle 라이브러리 씀
//  npm i crypto-js merkle